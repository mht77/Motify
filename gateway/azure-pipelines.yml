trigger:
  branches:
    include:
      - main
  paths:
    include:
    - gateway
    - protos

resources:
- repo: self

pool: 
   vmImage: ubuntu-latest

variables:
  imageRepository: 'motifygateway'
  containerRegistry: 'motifyregistery.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/gateway/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Test
  displayName: Run differnt types of test
  jobs:
  - job: Test
    displayName: Unit and Integration tests
    steps:
    - script: docker run --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres123motify -e POSTGRES_DB=gateway -d postgres
      displayName: Run postgres container
    - script: docker run --name rabbitmq -p 5672:5672 -p 15672:15672  -d rabbitmq:3-management
      displayName: Run rabbitmq container
    - script: |
        pushd '$(Build.SourcesDirectory)/gateway'
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        screen -S test -d -m ./run.sh
      displayName: 'Install prerequisites'
    - script: |
        pushd '$(Build.SourcesDirectory)/gateway'
        coverage run --source='.' manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
        coverage xml
      displayName: 'Run tests'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        failTaskOnFailedTests: true
      condition: succeededOrFailed()
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/gateway/coverage.xml'
    - task: QodanaScan@2022

- stage: Docker_Build
  displayName: Build and push docker image
  jobs:
  - job: Build
    displayName: Build docker image
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: 'motifyregistery'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath)'
        buildContext: '$(Build.SourcesDirectory)'
        tags: '$(tag)'
- stage: Deployment
  displayName: Pull the image in Container App
  jobs:
    - deployment: Deploy_Dev
      environment: Prod
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureContainerApps@0
              inputs:
                azureSubscription: 'Motify'
                acrName: 'motifyregistery'
                imageToDeploy: '$(containerRegistry)/$(imageRepository):$(tag)'
                containerAppName: 'motify-dev-gateway'
                resourceGroup: 'motify-dev'
                containerAppEnvironment: 'motify-dev-managed-environment'
                targetPort: '7777'